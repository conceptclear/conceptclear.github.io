---
layout: post
title:  "三维模型的体素化————表面体素化"
date:   2019-05-31 10:35:56
category: CG
---

体素（voxel）是体积像素（volume pixel）的简称，类似于二维空间中的最小单位————像素，体素是三维空间分割中的最小单位，被广泛应用于三维成像、科学数据与医学影像等领域。三维模型的体素化本质上就是对模型所在的三维空间进行离散化从而分割成正方体或长方体网格，并判断每个网格是否处于模型上（表面体素化）或模型内部（实体体素化）。由于计算机中对于三维图像的处理几乎都是基于三角面片的，三维模型的保存格式也基本都以三角面片为最小单元进行储存，三维模型的表面体素化也就可以转化成为空间中每个三角面片的体素化。                                    

## 3D离散空间


## 体素信息的存储
一般来说，体素如同像素并不会存储它们在空间中位置的数据，但是可以通过某些方法来求解出坐标。实际上，如果每个体素都保存自己的坐标信息，当分辨率足够高时，体素信息值会变得非常巨大。当不使用八叉树的存储方法而是每个空间体素都进行储存，假设在计算机处理中以整型变量int来存储每个体素的三个方向坐标，每个int为4个字节，这样每个体素光是位置信息就需要12字节来进行存储，即96byte，若再使用一个整型变量来储存当前体素是否在模型内部，则单个体素就需要128byte的存储空间，对于分辨率为1024x1024x1024的体素空间来说，则需要128GB的存储空间，这么大的空间用来存储信息明显是过剩的。                           
对于每个体素来说，实际上只需要1位的数据来存储信息，即在模型上和不在模型上两个状态，一个整型数据有32位既可以保存32个体素的信息，这样对于分辨率为1024x1024x1024的体素空间来说，只需要1G的存储空间，一般的PC基本上都可以实现1G内存的调用。                  
具体如何分配这32位数据分别存储哪些位置的点方法有很多，比较简单的方法是首先将3维空间的体素坐标降维到1维坐标，如下所示：                  

$$
location = x + (y*gridsize) + (z*gridsize*gridsize)
$$

其中，x、y、z分别为空间中体素坐标，gridsize为体素空间的分辨率，这里简化处理将x、y、z看作相同的分辨率，location即为降维之后的坐标；int数据类型一般是32位，最大可以存储的数据为2^31-1，按照这样降维处理的话最大的分辨率只能取到1024^3，一般情况下是足够了。             
得到了具体体素的位置就可以去存储体素信息的内存中去搜寻该体素的信息了，但是正如之前描述，并不是每个体素都占用1个数据结构来存储，实际上每32个体素占用了一个int的信息，这里采取的办法如下图所示，location除以32所得到的数值int_location即为存储该体素信息的数据位置，再利用位与操作来确定具体信息。
![voxel_location](https://github.com/conceptclear/conceptclear.github.io/raw/master/images/voxelization/voxel_location.png "Voxel_location")

为了进一步的缩小体素信息所占内存空间，可以采用八叉树（octree）这种数据结构来储存数据。八叉树结构在计算机图形学中有着广泛的应用，简单来说就是对于每个节点判断其是否为灰节点（节点与三维模型表面相交），如果是则继续往下划分直到所设定精度，若不是灰节点，则停止继续往下划分。这样可以比较大幅度的减少内存的占用，但是对于体素模型后续的操作带来了一定的困难。
